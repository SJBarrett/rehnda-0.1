@startuml

title "Participants - Sequence Diagram"

participant VulkanRenderer as vr
participant FrameCoordinator as fc
participant SwapchainManager as sm
participant GraphicsPipeline as gp
participant GraphicsQueue as gq
participant PresentQueue as pq
participant CommandBuffer as cb
participant LogicalDevice as ld


vr -> fc++: DrawFrame

fc -> ls: WaitForFences\nWait for frame to have finished drawing
fc -> ld: ResetFence
fc -> cb: ResetCommandBuffer
fc -> sm++: acquireNextImageIndex
sm -> ld: acquireNextImageKHR
sm --> fc--: image index
fc -> gp++: recordCommandBuffer(&buffer, imageIndex)

gp -> cb++: begin (reset buffer and sets it in a recording state)
gp -> cb: [[https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginRenderPass.html beginRenderPass]]\n{ swapchainFrameBuffer, render extents, clear color}
gp -> cb: [[https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindPipeline.html bindPipeline(graphics, &pipeline)]]
gp -> cb: [[https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewport.html setViewport(&extents width and height)]]
gp -> cb: setScissor
gp -> cb: [[https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDraw.html draw(vertCount, instanceCount, firstVertIndex, firstInstanceIndex)]]
gp -> cb: endRenderPass
gp -> cb: end

fc -> gq: [[https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSubmit.html submit]] \n {&commandBuffer, Semaphore to wait \non, and semaphore to signal on completion}
fc -> sm++: present
sm -> pq: presentKHR
deactivate sm

@enduml